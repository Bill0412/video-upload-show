{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Filler","props","className","style","width","percentage","ProgressBar","id","filename","queueIndex","App","fileStates","useState","files","setFiles","firebase","length","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","storageRef","ref","type","onChange","event","console","log","target","i","newFile","prevFiles","multiple","onClick","promises","forEach","file","progress","uploadTask","child","name","put","push","on","TaskEvent","STATE_CHANGED","snapshot","bytesTransferred","totalBytes","Number","toFixed","fileId","task","blob_","data_","state","TaskState","RUNNING","find","item","error","code","Promise","all","then","catch","err","bars","key","genProgressBars","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gQAIMA,EAAS,SAACC,GACd,OAAO,yBAAKC,UAAU,SAASC,MAAO,CAACC,MAAM,GAAD,OAAKH,EAAMI,WAAX,SAGxCC,EAAc,SAACL,GACnB,OACE,yBAAKC,UAAU,iBAAiBK,GAAIN,EAAMM,IACxC,yBAAKL,UAAU,SAASD,EAAMO,UAC9B,yBAAKN,UAAU,gBAAe,kBAAC,EAAD,CAAQG,WAAYJ,EAAMI,cACxD,6BAAMJ,EAAMI,WAAZ,OAKFI,EAAa,EAmHFC,EAjHH,SAACT,GACX,IAAMU,EAAYC,mBAAS,IACrBC,EAAQF,EAAW,GACnBG,EAAiBH,EAAW,GAiB9BI,OAAcC,QAChBD,gBAZqB,CACrBE,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAOjB,IACMC,EADUV,YACWW,MA0E3B,OACE,yBAAKxB,UAAU,OACf,2BAAOyB,KAAK,OAAOC,SA1EO,SAACC,GAC3BC,QAAQC,IAAIF,EAAMG,OAAOnB,MAAM,IAE/B,IAH2C,eAGnCoB,GACN,IAAMC,EAAgBL,EAAMG,OAAOnB,MAAMoB,GACzCC,EAAO,GA1BFzB,IA2BLyB,EAAO,SAAe,EACtBJ,QAAQC,IAAIG,GACZpB,GAAS,SAACqB,GAAD,4BAAyBA,GAAzB,CAAoCD,QALvCD,EAAI,EAAGA,EAAIJ,EAAMG,OAAOnB,MAAMG,OAAQiB,IAAM,EAA5CA,IAuE0CG,UAAQ,IAC1D,4BAAQC,QAjDgB,SAACR,GAIzB,IAAMS,EAAiB,GACvBzB,EAAM0B,SAAQ,SAACC,GACb,GAAGA,EAAKC,SAAW,IAAK,CACtB,IAAMC,EAAmBjB,EAAWkB,MAAMH,EAAKI,MAAMC,IAAIL,GAGzDF,EAASQ,KAAKJ,GACdA,EAAWK,GACThC,UAAiBiC,UAAUC,eAC3B,SAACC,GAEC,IAAIT,EAAYS,EAASC,iBAAmBD,EAASE,WAAc,IACnEX,EAAWY,OAAOZ,EAASa,QAAQ,IAGnC,IAAIC,EAASL,EAASM,KAAKC,MAAMC,MAAMnD,GAGpC2C,EAASS,QAAU5C,UAAiB6C,UAAUC,SAC/C/C,GAAS,SAACqB,GAER,OADAA,EAAU2B,MAAK,SAACC,GAAD,OAAgBA,EAAKxD,KAAOgD,KAAQd,SAAWA,EACvD,YAAIN,MAKfL,QAAQC,IAAIlB,MAEd,SAACmD,GAAD,OAAiBlC,QAAQC,IAAIiC,EAAMC,aAIzCnC,QAAQC,IAAIO,GACZ4B,QAAQC,IAAI7B,GACT8B,MAAK,WACJtC,QAAQC,IAAI,yBAEbsC,OAAM,SAAAC,GAAG,OAAIxC,QAAQC,IAAIuC,EAAIL,WAQhC,UA/DsB,WACtB,IAAIM,EAAa,GAUjB,OARA1D,EAAM0B,SAAQ,SAACC,GACb+B,EAAKzB,KACH,wBAAI0B,IAAKhC,EAAKjC,IACZ,kBAAC,EAAD,CAAaA,GAAIiC,EAAKjC,GAAIF,WAAYmC,EAAKC,SAAUjC,SAAUgC,EAAKI,YAKnE2B,EAuDNE,KCjHeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAL,GACLlC,QAAQkC,MAAMA,EAAMwB,c","file":"static/js/main.37caa92b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport * as firebase from 'firebase';\n\nconst Filler = (props:any) => {\n  return <div className=\"filler\" style={{width: `${props.percentage}%`}}/>\n}\n\nconst ProgressBar = (props : any) => {\n  return(\n    <div className=\"flex-container\" id={props.id}>\n      <div className=\"title\">{props.filename}</div>\n      <div className=\"progress-bar\"><Filler percentage={props.percentage}/></div>\n      <div>{props.percentage}%</div>\n    </div>\n  )\n};\n\nlet queueIndex = 0;\n\nconst App = (props : any) => {\n  const fileStates= useState([]);\n  const files = fileStates[0];\n  const setFiles : any = fileStates[1];\n\n  const nextQueueIndex = () => {\n    return queueIndex++;\n  }\n  \n  const firebaseConfig = {\n    apiKey: \"AIzaSyAAJ11KSyoF72gWXLxsR1dD3V_Udoj8jxc\",\n    authDomain: \"video-c34ea.firebaseapp.com\",\n    databaseURL: \"https://video-c34ea.firebaseio.com\",\n    projectId: \"video-c34ea\",\n    storageBucket: \"video-c34ea.appspot.com\",\n    messagingSenderId: \"216349406039\",\n    appId: \"1:216349406039:web:ec24a29f93432dde3dc412\",\n    measurementId: \"G-7BS6XD2MXQ\"\n  };\n  \n  if(!firebase.apps.length) {\n    firebase.initializeApp(firebaseConfig);\n  }\n\n  const storage = firebase.storage();\n  const storageRef = storage.ref();\n\n  const fileSelectedHandler = (event : any) => {\n    console.log(event.target.files[0]);\n    \n    for(let i = 0; i < event.target.files.length; i++) {\n      const newFile : any = event.target.files[i];\n      newFile[\"id\"] = nextQueueIndex();\n      newFile[\"progress\"] = 0;\n      console.log(newFile);\n      setFiles((prevFiles : any) => [...prevFiles, newFile]);\n    }\n  }\n\n  const genProgressBars = () => {\n    let bars : any = [];\n    \n    files.forEach((file : any) => {\n      bars.push(\n        <li key={file.id}>\n          <ProgressBar id={file.id} percentage={file.progress} filename={file.name}/>\n        </li>\n      )\n    });\n\n    return bars;\n  }\n\n  const fileUploadHandler = (event : any) => {\n\n    //event.preventDefault();   // prevent page refreshing\n\n    const promises : any = [];\n    files.forEach((file : any) => {\n      if(file.progress < 100) {\n        const uploadTask : any = storageRef.child(file.name).put(file);\n        // console.log(uploadTask);\n        // const generation : any = uploadTask.metadata_.generation;\n        promises.push(uploadTask);\n        uploadTask.on(\n          firebase.storage.TaskEvent.STATE_CHANGED,\n          (snapshot:any) => {\n            // calculate the progress\n            let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            progress = Number(progress.toFixed(2));\n\n            // get file id\n            let fileId = snapshot.task.blob_.data_.id;\n\n            // update the progress\n            if(snapshot.state === firebase.storage.TaskState.RUNNING) {\n              setFiles((prevFiles : any) => {\n                prevFiles.find((item : any) => item.id === fileId).progress = progress;\n                return [...prevFiles];\n              })\n            }\n              \n            \n            console.log(files);\n          },\n          (error : any) => console.log(error.code),\n        )\n      }\n    });\n    console.log(promises);\n    Promise.all(promises)\n      .then(() => {\n        console.log(\"All files uploaded\")\n      })\n      .catch(err => console.log(err.code));\n\n  }\n\n\n  return (\n    <div className=\"App\">\n    <input type=\"file\" onChange={fileSelectedHandler} multiple></input>\n    <button onClick={fileUploadHandler}>Upload</button>\n    {/*files[0] ? <ProgressBar percentage={files[0][\"progress\"]} filename={files[0][\"name\"]}/> : <div></div>8*/}\n    {/* {this.state.percent === 100 ? <div>Uploading...</div> : <div>Uploaded</div>} */}\n    {genProgressBars()}\n    </div>\n  );\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}