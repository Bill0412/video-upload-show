{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["require","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","App","state","selectedFile","storageRef","ref","fileSelectedHandler","event","console","log","target","files","setState","fileUploadHandler","child","name","put","then","snapshot","className","type","onChange","this","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iSAGWA,EAAQ,IACRA,EAAQ,IACNA,EAAQ,IAarBC,gBAXuB,CACrBC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKjB,IAAMC,EAAUT,YAmCDU,E,2MA/BbC,MAAY,CACVC,aAAc,M,EAEhBC,WAAaJ,EAAQK,M,EAErBC,oBAAsB,SAACC,GACrBC,QAAQC,IAAIF,EAAMG,OAAOC,MAAM,IAC/B,EAAKC,SAAS,CACZT,aAAcI,EAAMG,OAAOC,MAAM,M,EAIrCE,kBAAoB,WAEH,EAAKT,WAAWU,MAAM,EAAKZ,MAAMC,aAAaY,MACpDC,IAAI,EAAKd,MAAMC,cACrBc,MAAK,SAACC,GACLV,QAAQC,IAAI,gC,wEAKhB,OACE,yBAAKU,UAAU,OACf,2BAAOC,KAAK,OAAOC,SAAUC,KAAKhB,sBAClC,4BAAQiB,QAASD,KAAKT,mBAAtB,e,GA3BYW,aCVEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.85d3adc6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport * as firebase from 'firebase';\nconst os = require('os');\nconst fs = require('fs');\nconst path = require('path');\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAAJ11KSyoF72gWXLxsR1dD3V_Udoj8jxc\",\n  authDomain: \"video-c34ea.firebaseapp.com\",\n  databaseURL: \"https://video-c34ea.firebaseio.com\",\n  projectId: \"video-c34ea\",\n  storageBucket: \"video-c34ea.appspot.com\",\n  messagingSenderId: \"216349406039\",\n  appId: \"1:216349406039:web:ec24a29f93432dde3dc412\",\n  measurementId: \"G-7BS6XD2MXQ\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst storage = firebase.storage();\n\nclass App extends Component{\n\n  state:any = {\n    selectedFile: null\n  }\n  storageRef = storage.ref();\n\n  fileSelectedHandler = (event: any) => {\n    console.log(event.target.files[0]);\n    this.setState({\n      selectedFile: event.target.files[0]\n    })\n  }\n\n  fileUploadHandler = () => {\n    // const filepath = path.join(os.tmpdir(), filename);\n    let videoRef = this.storageRef.child(this.state.selectedFile.name);\n    videoRef.put(this.state.selectedFile)\n      .then((snapshot:any) => {\n        console.log('Uploaded a blob or file!');\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <input type=\"file\" onChange={this.fileSelectedHandler}></input>\n      <button onClick={this.fileUploadHandler}>Upload</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}