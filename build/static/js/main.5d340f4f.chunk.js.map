{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Filler","props","className","style","width","percentage","ProgressBar","filename","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","storage","App","state","selectedFile","percent","storageRef","ref","fileSelectedHandler","event","console","log","target","files","setState","fileUploadHandler","child","name","put","on","data","now","bytesTransferred","totalBytes","Number","toFixed","prevState","err","type","onChange","this","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gSAIMA,EAAS,SAACC,GACd,OAAO,yBAAKC,UAAU,SAASC,MAAO,CAACC,MAAM,GAAD,OAAKH,EAAMI,WAAX,SAGxCC,EAAc,SAACL,GACnB,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,SAASD,EAAMM,UAC9B,yBAAKL,UAAU,gBAAe,kBAAC,EAAD,CAAQG,WAAYJ,EAAMI,cACxD,6BAAMJ,EAAMI,WAAZ,OAgBNG,gBAXuB,CACrBC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKjB,IAAMC,EAAUT,YAuDDU,E,2MAnDbC,MAAY,CACVC,aAAc,KACdC,QAAS,G,EAEXC,WAAaL,EAAQM,M,EAErBC,oBAAsB,SAACC,GACrBC,QAAQC,IAAIF,EAAMG,OAAOC,MAAM,IAC/B,EAAKC,SAAS,CAEZV,aAAcK,EAAMG,OAAOC,MAAM,GACjCR,QAAS,K,EAKbU,kBAAoB,WAEH,EAAKT,WAAWU,MAAM,EAAKb,MAAMC,aAAaa,MACpDC,IAAI,EAAKf,MAAMC,cACrBe,GACC,iBACA,SAACC,GACC,IAAIC,EAAOD,EAAKE,iBAAmBF,EAAKG,WAAc,IACtDF,EAAMG,OAAOH,EAAII,QAAQ,IACzB,EAAKX,UAAS,SAACY,GAAD,MAAgB,CAC5BrB,QAASgB,SAGb,SAACM,GACCjB,QAAQC,IAAI,SACZD,QAAQC,IAAIgB,MAEd,WACEjB,QAAQC,IAAI,wB,wEAOlB,OACE,yBAAKzB,UAAU,OACf,2BAAO0C,KAAK,OAAOC,SAAUC,KAAKtB,sBAClC,4BAAQuB,QAASD,KAAKf,mBAAtB,UACCe,KAAK3B,MAAMC,aAAe,kBAAC,EAAD,CAAaf,WAAYyC,KAAK3B,MAAME,QAASd,SAAUuC,KAAK3B,MAAMC,aAAaa,OAAU,mC,GA/CxGe,aCrBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.5d340f4f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport * as firebase from 'firebase';\n\nconst Filler = (props:any) => {\n  return <div className=\"filler\" style={{width: `${props.percentage}%`}}/>\n}\n\nconst ProgressBar = (props:any) => {\n  return(\n    <div className=\"flex-container\">\n      <div className=\"title\">{props.filename}</div>\n      <div className=\"progress-bar\"><Filler percentage={props.percentage}/></div>\n      <div>{props.percentage}%</div>\n    </div>\n  )\n};\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAAJ11KSyoF72gWXLxsR1dD3V_Udoj8jxc\",\n  authDomain: \"video-c34ea.firebaseapp.com\",\n  databaseURL: \"https://video-c34ea.firebaseio.com\",\n  projectId: \"video-c34ea\",\n  storageBucket: \"video-c34ea.appspot.com\",\n  messagingSenderId: \"216349406039\",\n  appId: \"1:216349406039:web:ec24a29f93432dde3dc412\",\n  measurementId: \"G-7BS6XD2MXQ\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst storage = firebase.storage();\n\nclass App extends Component{\n\n  state:any = {\n    selectedFile: null,\n    percent: 0\n  }\n  storageRef = storage.ref();\n\n  fileSelectedHandler = (event: any) => {\n    console.log(event.target.files[0]);\n    this.setState({\n      \n      selectedFile: event.target.files[0],\n      percent: 0\n      //uploadingFiles: prevState.uploadingFiles\n    })\n  }\n\n  fileUploadHandler = () => {\n    // const filepath = path.join(os.tmpdir(), filename);\n    let videoRef = this.storageRef.child(this.state.selectedFile.name);\n    videoRef.put(this.state.selectedFile)\n      .on(\n        'state_changed', \n        (data) => {\n          let now = (data.bytesTransferred / data.totalBytes) * 100;\n          now = Number(now.toFixed(2));\n          this.setState((prevState) => ({\n            percent: now\n          }));\n        },\n        (err) => {\n          console.log('error');\n          console.log(err);\n        },\n        () => {\n          console.log('Uploaded a blob!');\n        }\n      );\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n      <input type=\"file\" onChange={this.fileSelectedHandler}></input>\n      <button onClick={this.fileUploadHandler}>Upload</button>\n      {this.state.selectedFile ? <ProgressBar percentage={this.state.percent} filename={this.state.selectedFile.name}/> : <div></div>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}